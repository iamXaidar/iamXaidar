class Geom:
    def __init__(self, x1, y1, x2, y2):
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2
        print(f'Geom __init__() is calling for {self.__class__} !')


class Line(Geom):
    """Так как конструктор базового класса подходит для создания атрибутов, нет смыла переопределять его
    в этом классе."""
    def draw(self):
        print(f'Рисовании линии по координатам: {self.x1, self.y1, self.x2, self.y2}')


class Rect(Geom):
    """В этом классе базовый конструктор не может выполнить всю работу. Поэтому сначала он переопределяется,
     затем через функцию super() вызывается базовый и передаются общие аргументы и только потом задаются новые."""
    def __init__(self, x1, y1, x2, y2, fill=None):  # overriding
        print('Rect __init__() is calling!')
        super().__init__(x1, y1, x2, y2)  # через супер вызываем конструктор базового класса и передаем аргументы
        self.fill = fill  # добавляется новое

    def draw(self):
        print(f'Рисовании треугольника по координатам: {self.x1, self.y1, self.x2, self.y2}')


if __name__ == '__main__':
    line = Line(0, 0, 10, 20)  # При вызове используется конструктор базового класса, достаточно его функционала.
    rect = Rect(10, 20, 30, 40, fill=True)  # так как передается 5 параметров, конструктор переопределяется
